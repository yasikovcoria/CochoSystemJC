'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace mx.com.expidetufactura.timbradoP
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TimbradoTXTServiceSoapBinding", [Namespace]:="http://service.txt.timbrado.xpd.mx/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(respuestaTXT))>  _
    Partial Public Class TimbradoTXTService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private timbrarTXTYPDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private agregarCSDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private timbrarTXTYPDFPNominaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private timbrarTXTYPDFNominaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private timbrarTXTNominaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelarUUIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private timbrarTXTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private agregarLogoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private timbrarTXTYPDFPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private numeroLetraOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CochoSystem.My.MySettings.Default.CochoSystem_mx_com_expidetufactura_timbradoP_TimbradoTXTService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event timbrarTXTYPDFCompleted As timbrarTXTYPDFCompletedEventHandler
        
        '''<remarks/>
        Public Event agregarCSDCompleted As agregarCSDCompletedEventHandler
        
        '''<remarks/>
        Public Event timbrarTXTYPDFPNominaCompleted As timbrarTXTYPDFPNominaCompletedEventHandler
        
        '''<remarks/>
        Public Event timbrarTXTYPDFNominaCompleted As timbrarTXTYPDFNominaCompletedEventHandler
        
        '''<remarks/>
        Public Event timbrarTXTNominaCompleted As timbrarTXTNominaCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelarUUIDCompleted As cancelarUUIDCompletedEventHandler
        
        '''<remarks/>
        Public Event timbrarTXTCompleted As timbrarTXTCompletedEventHandler
        
        '''<remarks/>
        Public Event agregarLogoCompleted As agregarLogoCompletedEventHandler
        
        '''<remarks/>
        Public Event timbrarTXTYPDFPCompleted As timbrarTXTYPDFPCompletedEventHandler
        
        '''<remarks/>
        Public Event numeroLetraCompleted As numeroLetraCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function timbrarTXTYPDF(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal archivoTXT() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal generaPDF As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal plantilla As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified), System.Xml.Serialization.XmlIgnoreAttribute()> ByVal plantillaSpecified As Boolean) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaTimbradoTXT
            Dim results() As Object = Me.Invoke("timbrarTXTYPDF", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla, plantillaSpecified})
            Return CType(results(0),respuestaTimbradoTXT)
        End Function
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer, ByVal plantillaSpecified As Boolean)
            Me.timbrarTXTYPDFAsync(usuario, contrasena, archivoTXT, generaPDF, plantilla, plantillaSpecified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer, ByVal plantillaSpecified As Boolean, ByVal userState As Object)
            If (Me.timbrarTXTYPDFOperationCompleted Is Nothing) Then
                Me.timbrarTXTYPDFOperationCompleted = AddressOf Me.OntimbrarTXTYPDFOperationCompleted
            End If
            Me.InvokeAsync("timbrarTXTYPDF", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla, plantillaSpecified}, Me.timbrarTXTYPDFOperationCompleted, userState)
        End Sub
        
        Private Sub OntimbrarTXTYPDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.timbrarTXTYPDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent timbrarTXTYPDFCompleted(Me, New timbrarTXTYPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function agregarCSD(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasenaLlave As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal certificado() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal llavePrivada() As Byte) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaAgregarCSD
            Dim results() As Object = Me.Invoke("agregarCSD", New Object() {usuario, contrasena, contrasenaLlave, certificado, llavePrivada})
            Return CType(results(0),respuestaAgregarCSD)
        End Function
        
        '''<remarks/>
        Public Overloads Sub agregarCSDAsync(ByVal usuario As String, ByVal contrasena As String, ByVal contrasenaLlave As String, ByVal certificado() As Byte, ByVal llavePrivada() As Byte)
            Me.agregarCSDAsync(usuario, contrasena, contrasenaLlave, certificado, llavePrivada, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub agregarCSDAsync(ByVal usuario As String, ByVal contrasena As String, ByVal contrasenaLlave As String, ByVal certificado() As Byte, ByVal llavePrivada() As Byte, ByVal userState As Object)
            If (Me.agregarCSDOperationCompleted Is Nothing) Then
                Me.agregarCSDOperationCompleted = AddressOf Me.OnagregarCSDOperationCompleted
            End If
            Me.InvokeAsync("agregarCSD", New Object() {usuario, contrasena, contrasenaLlave, certificado, llavePrivada}, Me.agregarCSDOperationCompleted, userState)
        End Sub
        
        Private Sub OnagregarCSDOperationCompleted(ByVal arg As Object)
            If (Not (Me.agregarCSDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent agregarCSDCompleted(Me, New agregarCSDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function timbrarTXTYPDFPNomina(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal archivoTXT() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal generaPDF As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal plantilla As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal properties() As Byte) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaTimbradoTXT
            Dim results() As Object = Me.Invoke("timbrarTXTYPDFPNomina", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla, properties})
            Return CType(results(0),respuestaTimbradoTXT)
        End Function
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFPNominaAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer, ByVal properties() As Byte)
            Me.timbrarTXTYPDFPNominaAsync(usuario, contrasena, archivoTXT, generaPDF, plantilla, properties, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFPNominaAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer, ByVal properties() As Byte, ByVal userState As Object)
            If (Me.timbrarTXTYPDFPNominaOperationCompleted Is Nothing) Then
                Me.timbrarTXTYPDFPNominaOperationCompleted = AddressOf Me.OntimbrarTXTYPDFPNominaOperationCompleted
            End If
            Me.InvokeAsync("timbrarTXTYPDFPNomina", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla, properties}, Me.timbrarTXTYPDFPNominaOperationCompleted, userState)
        End Sub
        
        Private Sub OntimbrarTXTYPDFPNominaOperationCompleted(ByVal arg As Object)
            If (Not (Me.timbrarTXTYPDFPNominaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent timbrarTXTYPDFPNominaCompleted(Me, New timbrarTXTYPDFPNominaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function timbrarTXTYPDFNomina(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal archivoTXT() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal generaPDF As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal plantilla As Integer) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaTimbradoTXT
            Dim results() As Object = Me.Invoke("timbrarTXTYPDFNomina", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla})
            Return CType(results(0),respuestaTimbradoTXT)
        End Function
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFNominaAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer)
            Me.timbrarTXTYPDFNominaAsync(usuario, contrasena, archivoTXT, generaPDF, plantilla, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFNominaAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer, ByVal userState As Object)
            If (Me.timbrarTXTYPDFNominaOperationCompleted Is Nothing) Then
                Me.timbrarTXTYPDFNominaOperationCompleted = AddressOf Me.OntimbrarTXTYPDFNominaOperationCompleted
            End If
            Me.InvokeAsync("timbrarTXTYPDFNomina", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla}, Me.timbrarTXTYPDFNominaOperationCompleted, userState)
        End Sub
        
        Private Sub OntimbrarTXTYPDFNominaOperationCompleted(ByVal arg As Object)
            If (Not (Me.timbrarTXTYPDFNominaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent timbrarTXTYPDFNominaCompleted(Me, New timbrarTXTYPDFNominaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function timbrarTXTNomina(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal archivoTXT() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal plantilla As Integer) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaTimbradoTXT
            Dim results() As Object = Me.Invoke("timbrarTXTNomina", New Object() {usuario, contrasena, archivoTXT, plantilla})
            Return CType(results(0),respuestaTimbradoTXT)
        End Function
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTNominaAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal plantilla As Integer)
            Me.timbrarTXTNominaAsync(usuario, contrasena, archivoTXT, plantilla, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTNominaAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal plantilla As Integer, ByVal userState As Object)
            If (Me.timbrarTXTNominaOperationCompleted Is Nothing) Then
                Me.timbrarTXTNominaOperationCompleted = AddressOf Me.OntimbrarTXTNominaOperationCompleted
            End If
            Me.InvokeAsync("timbrarTXTNomina", New Object() {usuario, contrasena, archivoTXT, plantilla}, Me.timbrarTXTNominaOperationCompleted, userState)
        End Sub
        
        Private Sub OntimbrarTXTNominaOperationCompleted(ByVal arg As Object)
            If (Not (Me.timbrarTXTNominaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent timbrarTXTNominaCompleted(Me, New timbrarTXTNominaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelarUUID(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal noCertificado As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal uuid As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal emisor As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaCancelacion
            Dim results() As Object = Me.Invoke("cancelarUUID", New Object() {usuario, contrasena, noCertificado, uuid, emisor})
            Return CType(results(0),respuestaCancelacion)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelarUUIDAsync(ByVal usuario As String, ByVal contrasena As String, ByVal noCertificado As String, ByVal uuid As String, ByVal emisor As String)
            Me.cancelarUUIDAsync(usuario, contrasena, noCertificado, uuid, emisor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelarUUIDAsync(ByVal usuario As String, ByVal contrasena As String, ByVal noCertificado As String, ByVal uuid As String, ByVal emisor As String, ByVal userState As Object)
            If (Me.cancelarUUIDOperationCompleted Is Nothing) Then
                Me.cancelarUUIDOperationCompleted = AddressOf Me.OncancelarUUIDOperationCompleted
            End If
            Me.InvokeAsync("cancelarUUID", New Object() {usuario, contrasena, noCertificado, uuid, emisor}, Me.cancelarUUIDOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelarUUIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelarUUIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelarUUIDCompleted(Me, New cancelarUUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function timbrarTXT(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal archivoTXT() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal plantilla As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified), System.Xml.Serialization.XmlIgnoreAttribute()> ByVal plantillaSpecified As Boolean) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaTimbradoTXT
            Dim results() As Object = Me.Invoke("timbrarTXT", New Object() {usuario, contrasena, archivoTXT, plantilla, plantillaSpecified})
            Return CType(results(0),respuestaTimbradoTXT)
        End Function
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal plantilla As Integer, ByVal plantillaSpecified As Boolean)
            Me.timbrarTXTAsync(usuario, contrasena, archivoTXT, plantilla, plantillaSpecified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal plantilla As Integer, ByVal plantillaSpecified As Boolean, ByVal userState As Object)
            If (Me.timbrarTXTOperationCompleted Is Nothing) Then
                Me.timbrarTXTOperationCompleted = AddressOf Me.OntimbrarTXTOperationCompleted
            End If
            Me.InvokeAsync("timbrarTXT", New Object() {usuario, contrasena, archivoTXT, plantilla, plantillaSpecified}, Me.timbrarTXTOperationCompleted, userState)
        End Sub
        
        Private Sub OntimbrarTXTOperationCompleted(ByVal arg As Object)
            If (Not (Me.timbrarTXTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent timbrarTXTCompleted(Me, New timbrarTXTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function agregarLogo(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal emisor As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal logo() As Byte) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaAgregarLogo
            Dim results() As Object = Me.Invoke("agregarLogo", New Object() {usuario, contrasena, emisor, logo})
            Return CType(results(0),respuestaAgregarLogo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub agregarLogoAsync(ByVal usuario As String, ByVal contrasena As String, ByVal emisor As String, ByVal logo() As Byte)
            Me.agregarLogoAsync(usuario, contrasena, emisor, logo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub agregarLogoAsync(ByVal usuario As String, ByVal contrasena As String, ByVal emisor As String, ByVal logo() As Byte, ByVal userState As Object)
            If (Me.agregarLogoOperationCompleted Is Nothing) Then
                Me.agregarLogoOperationCompleted = AddressOf Me.OnagregarLogoOperationCompleted
            End If
            Me.InvokeAsync("agregarLogo", New Object() {usuario, contrasena, emisor, logo}, Me.agregarLogoOperationCompleted, userState)
        End Sub
        
        Private Sub OnagregarLogoOperationCompleted(ByVal arg As Object)
            If (Not (Me.agregarLogoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent agregarLogoCompleted(Me, New agregarLogoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function timbrarTXTYPDFP(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal contrasena As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal archivoTXT() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal generaPDF As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal plantilla As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified), System.Xml.Serialization.XmlIgnoreAttribute()> ByVal plantillaSpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")> ByVal properties() As Byte) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> respuestaTimbradoTXT
            Dim results() As Object = Me.Invoke("timbrarTXTYPDFP", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla, plantillaSpecified, properties})
            Return CType(results(0),respuestaTimbradoTXT)
        End Function
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFPAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer, ByVal plantillaSpecified As Boolean, ByVal properties() As Byte)
            Me.timbrarTXTYPDFPAsync(usuario, contrasena, archivoTXT, generaPDF, plantilla, plantillaSpecified, properties, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub timbrarTXTYPDFPAsync(ByVal usuario As String, ByVal contrasena As String, ByVal archivoTXT() As Byte, ByVal generaPDF As Boolean, ByVal plantilla As Integer, ByVal plantillaSpecified As Boolean, ByVal properties() As Byte, ByVal userState As Object)
            If (Me.timbrarTXTYPDFPOperationCompleted Is Nothing) Then
                Me.timbrarTXTYPDFPOperationCompleted = AddressOf Me.OntimbrarTXTYPDFPOperationCompleted
            End If
            Me.InvokeAsync("timbrarTXTYPDFP", New Object() {usuario, contrasena, archivoTXT, generaPDF, plantilla, plantillaSpecified, properties}, Me.timbrarTXTYPDFPOperationCompleted, userState)
        End Sub
        
        Private Sub OntimbrarTXTYPDFPOperationCompleted(ByVal arg As Object)
            If (Not (Me.timbrarTXTYPDFPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent timbrarTXTYPDFPCompleted(Me, New timbrarTXTYPDFPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://service.txt.timbrado.xpd.mx/", ResponseNamespace:="http://service.txt.timbrado.xpd.mx/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function numeroLetra(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("numeroLetra", New Object() {arg0})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub numeroLetraAsync(ByVal arg0 As String)
            Me.numeroLetraAsync(arg0, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub numeroLetraAsync(ByVal arg0 As String, ByVal userState As Object)
            If (Me.numeroLetraOperationCompleted Is Nothing) Then
                Me.numeroLetraOperationCompleted = AddressOf Me.OnnumeroLetraOperationCompleted
            End If
            Me.InvokeAsync("numeroLetra", New Object() {arg0}, Me.numeroLetraOperationCompleted, userState)
        End Sub
        
        Private Sub OnnumeroLetraOperationCompleted(ByVal arg As Object)
            If (Not (Me.numeroLetraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent numeroLetraCompleted(Me, New numeroLetraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.txt.timbrado.xpd.mx/")>  _
    Partial Public Class respuestaTimbradoTXT
        Inherits respuestaTXT
        
        Private pdfField() As Byte
        
        Private xmlTimbradoField() As Byte
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")>  _
        Public Property pdf() As Byte()
            Get
                Return Me.pdfField
            End Get
            Set
                Me.pdfField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")>  _
        Public Property xmlTimbrado() As Byte()
            Get
                Return Me.xmlTimbradoField
            End Get
            Set
                Me.xmlTimbradoField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(respuestaAgregarLogo)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(respuestaAgregarCSD)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(respuestaTimbradoTXT)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.txt.timbrado.xpd.mx/")>  _
    Partial Public Class respuestaTXT
        
        Private codigoField As String
        
        Private mensajeField As String
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property codigo() As String
            Get
                Return Me.codigoField
            End Get
            Set
                Me.codigoField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property mensaje() As String
            Get
                Return Me.mensajeField
            End Get
            Set
                Me.mensajeField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.xpd.mx/")>  _
    Partial Public Class respuestaCancelacion
        
        Private acuseField As String
        
        Private codEstatusField As String
        
        Private codMensajeField As String
        
        Private estatusUUIDsField() As String
        
        Private uuidsField() As String
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property acuse() As String
            Get
                Return Me.acuseField
            End Get
            Set
                Me.acuseField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property codEstatus() As String
            Get
                Return Me.codEstatusField
            End Get
            Set
                Me.codEstatusField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property codMensaje() As String
            Get
                Return Me.codMensajeField
            End Get
            Set
                Me.codMensajeField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute("estatusUUIDs", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
        Public Property estatusUUIDs() As String()
            Get
                Return Me.estatusUUIDsField
            End Get
            Set
                Me.estatusUUIDsField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute("uuids", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
        Public Property uuids() As String()
            Get
                Return Me.uuidsField
            End Get
            Set
                Me.uuidsField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.txt.timbrado.xpd.mx/")>  _
    Partial Public Class respuestaAgregarLogo
        Inherits respuestaTXT
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.txt.timbrado.xpd.mx/")>  _
    Partial Public Class respuestaAgregarCSD
        Inherits respuestaTXT
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub timbrarTXTYPDFCompletedEventHandler(ByVal sender As Object, ByVal e As timbrarTXTYPDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class timbrarTXTYPDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaTimbradoTXT
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaTimbradoTXT)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub agregarCSDCompletedEventHandler(ByVal sender As Object, ByVal e As agregarCSDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class agregarCSDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaAgregarCSD
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaAgregarCSD)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub timbrarTXTYPDFPNominaCompletedEventHandler(ByVal sender As Object, ByVal e As timbrarTXTYPDFPNominaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class timbrarTXTYPDFPNominaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaTimbradoTXT
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaTimbradoTXT)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub timbrarTXTYPDFNominaCompletedEventHandler(ByVal sender As Object, ByVal e As timbrarTXTYPDFNominaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class timbrarTXTYPDFNominaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaTimbradoTXT
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaTimbradoTXT)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub timbrarTXTNominaCompletedEventHandler(ByVal sender As Object, ByVal e As timbrarTXTNominaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class timbrarTXTNominaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaTimbradoTXT
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaTimbradoTXT)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub cancelarUUIDCompletedEventHandler(ByVal sender As Object, ByVal e As cancelarUUIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelarUUIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaCancelacion
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaCancelacion)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub timbrarTXTCompletedEventHandler(ByVal sender As Object, ByVal e As timbrarTXTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class timbrarTXTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaTimbradoTXT
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaTimbradoTXT)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub agregarLogoCompletedEventHandler(ByVal sender As Object, ByVal e As agregarLogoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class agregarLogoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaAgregarLogo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaAgregarLogo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub timbrarTXTYPDFPCompletedEventHandler(ByVal sender As Object, ByVal e As timbrarTXTYPDFPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class timbrarTXTYPDFPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As respuestaTimbradoTXT
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),respuestaTimbradoTXT)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub numeroLetraCompletedEventHandler(ByVal sender As Object, ByVal e As numeroLetraCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class numeroLetraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
